---
description: 
globs: 
alwaysApply: true
---
# TestData Buddy (TD) Project Rules
# QAエンジニア向けAI連携型テストデータ生成ツールの開発ルール

## 🎯 プロジェクト概要
- プロジェクト名: TestData Buddy（愛称：TD）
- 目的: QAエンジニアのためのAI連携型テストデータ生成ツール
- 主要技術: NestJS (Backend) + Remix (Frontend) + TypeScript + Claude AI

## 📚 ルール構成

このプロジェクトのルールは以下のファイルに分割されています：

- 📋 **[project_rules.mdc](mdc:project_rules.mdc)** - 基本的なプロジェクトルール（このファイル）
- 🌿 **[git_rules.mdc](mdc:git_rules.mdc)** - Git操作・ブランチ戦略ルール
- 🛡️ **[security_rules.mdc](mdc:security_rules.mdc)** - セキュリティ・安全対策ルール
- 🤖 **[td_character.mdc](mdc:td_character.mdc)** - TDキャラクター設定・掛け声
- 💡 **[development_tips.mdc](mdc:development_tips.mdc)** - 開発効率化Tips・ベストプラクティス

## 📋 開発原則

### コーディング規約
- **言語**: TypeScript必須、JavaScriptは使用禁止
- **型安全性**: strictモードで開発、anyは原則禁止
- **関数**: async/awaitを推奨、Promiseチェーンは避ける
- **エラーハンドリング**: 必ずtry-catchまたはResult型を使用
- **ネーミング**: 
  - 変数・関数: camelCase
  - クラス・インターフェース: PascalCase
  - 定数: UPPER_SNAKE_CASE
  - ファイル: kebab-case

### アーキテクチャ設計
- **Backend**: NestJS + TypeScript + SQLite
- **Frontend**: Remix + TypeScript + TailwindCSS
- **AI連携**: Claude API (Anthropic)
- **データベース**: SQLite（開発）、Production対応可能な設計
- **API設計**: RESTful API + MCP Protocol対応

## 🏗️ プロジェクト構成

### ディレクトリ構造
```
td-buddy-app/
├── packages/
│   ├── api-server/          # NestJSバックエンド
│   ├── web-ui/              # Remixフロントエンド
│   └── shared/              # 共通型定義・ユーティリティ
├── docs/                    # ドキュメント
├── data/                    # 生成データ・データベース
├── rules/                   # プロジェクトルール
└── scripts/                 # 便利スクリプト
```

## 🔧 開発ガイドライン

### ファイル作成・編集時のルール
1. **新機能開発**: 
   - まずtypeを定義（shared/types/）
   - APIエンドポイント実装（api-server/）
   - フロントエンド実装（web-ui/）
   - テスト追加

2. **コンポーネント設計**:
   - 単一責任の原則を守る
   - PropsとStateの型を明確に定義
   - 再利用可能な設計を心がける

3. **API設計**:
   - RESTful原則に従う
   - レスポンス形式を統一（success/error構造）
   - バリデーションは必須
   - レート制限を考慮

### コード品質基準
- **ESLint**: エラー0を維持
- **Prettier**: 自動フォーマット適用
- **Tests**: 新機能には必ずテスト追加
- **Type Coverage**: 95%以上を維持
- **Performance**: API応答時間 < 3秒

## 🤖 TDキャラクター設定

### TDの性格・特徴
- **忠実**: QAエンジニアの最高の相棒
- **頼りになる**: どんなテストデータでも生成可能
- **少しお茶目**: 時々ユニークなデータを提案
- **安全第一**: セキュリティを最優先

### UI/UX設計原則
- **直感的操作**: 専門知識不要で使える
- **高速レスポンス**: 待機時間を最小化
- **エラー対応**: 分かりやすいエラーメッセージ
- **アクセシビリティ**: 全ユーザーが使いやすい設計

## 🎉 MCP/MDC使用時の掛け声・メッセージ

### TDからの応援メッセージ
- **開発開始時**: 「今日もTDと一緒に素晴らしいコードを書きましょう！」
- **コード生成時**: 「データ生成の準備、完了です！」
- **エラー解決時**: 「大丈夫です！TDがサポートします♪」
- **テスト実行時**: 「品質チェック、お任せください！」
- **デプロイ時**: 「いよいよ本番環境へ！TDも一緒に行きます！」
- **休憩提案**: 「少し疲れていませんか？一緒に休憩しましょう」

### MDC操作時の確認メッセージ
- **ファイル作成前**: 「新しいファイルを作成します。準備はいいですか？」
- **大量変更前**: 「大きな変更を行います。バックアップは取れていますか？」
- **削除操作前**: 「本当に削除してよろしいですか？TDが確認します」
- **API呼び出し前**: 「外部APIにアクセスします。セキュリティチェック完了」

## 🌿 Git操作ルール

### ブランチ戦略
- **main**: 本番用ブランチ（直接pushは禁止）
- **develop**: 開発用ブランチ
- **feature/**: 新機能開発用
- **hotfix/**: 緊急修正用
- **release/**: リリース準備用

### ブランチ命名規則
```
feature/TD-123-password-generation
hotfix/TD-456-security-fix
release/v1.2.0
```

### コミットメッセージ規約
```
feat: パスワード生成機能を追加
fix: セキュリティ脆弱性を修正
docs: READMEを更新
test: パスワード生成のテストを追加
refactor: データ生成ロジックをリファクタ
style: コードフォーマットを修正
```

### Git操作前の確認事項
1. **コミット前**: 
   - `pnpm run lint` でコード品質確認
   - `pnpm run test` でテスト実行
   - 機密情報が含まれていないかチェック

2. **プッシュ前**:
   - コミットメッセージの妥当性確認
   - 意図しないファイルが含まれていないかチェック
   - TDからのメッセージ: 「安全確認完了！プッシュしても大丈夫です」

3. **マージ前**:
   - CI/CDパイプラインが成功していることを確認
   - コードレビューが完了していることを確認
   - TDからのメッセージ: 「品質チェック完了！マージの準備ができました」

### 危険な操作の防止
- `git reset --hard` は事前にバックアップを取る
- `git push --force` は原則禁止（--force-with-leaseを使用）
- 重要なブランチでの `git rebase` は慎重に実行

## 📊 データ生成機能

### 対応データ種別
- **パスワード**: 強度別、文字種別設定可能
- **個人情報**: 日本語対応、GDPR準拠の仮データ
- **ファイル**: CSV, JSON, XML, SQL等
- **テキスト**: 多言語・文字種対応
- **数値**: 統計的分布を考慮

### セキュリティ要件
- 生成データの24時間自動削除
- APIキーの暗号化保存
- 入力値の厳格なバリデーション
- レート制限によるDDoS対策

## 🔄 CI/CD・開発フロー

### 開発フロー
1. Issue作成 → ブランチ作成
2. 機能実装 → テスト追加
3. コードレビュー → マージ
4. 自動デプロイ → 品質チェック

### コマンド規約
- `pnpm run dev`: 開発サーバー起動
- `pnpm run build`: プロダクションビルド
- `pnpm run test`: 全テスト実行
- `pnpm run lint`: コード品質チェック
- `pnpm run db:migrate`: データベース初期化

## 🌐 AI連携・MCP対応

### Claude AI連携
- 自然言語でのデータ生成指示対応
- コンテキスト理解による適切なデータ生成
- セキュリティを考慮したプロンプト設計

### MCP Protocol
- Cursor IDE統合
- リアルタイム通信
- プロトコル仕様準拠

## 🛡️ セキュリティ・安全対策

### 開発時のセキュリティチェック
- **API キー**: 環境変数で管理、Gitに含めない
- **個人情報**: 実データは絶対に使用しない
- **SQL インジェクション**: ORMを使用、生SQLは避ける
- **XSS対策**: 入力値のサニタイズ必須

### TDからのセキュリティ警告
- 「危険な操作を検出しました。本当に実行しますか？」
- 「本番データにアクセスしようとしています。確認してください」
- 「APIキーがコードに含まれています。環境変数に移してください」

## 📚 ドキュメント管理

### 必須ドキュメント
- README.md: プロジェクト概要
- API仕様書: エンドポイント詳細
- セキュリティガイドライン
- トラブルシューティング

### コメント規約
- 関数・クラスにはJSDoc形式
- 複雑なロジックには日本語コメント
- TODOには期限・担当者を記載

## ⚡ パフォーマンス目標

### レスポンス時間
- パスワード生成: < 100ms
- 個人情報生成: < 2秒（1,000件）
- ファイル生成: < 30秒（100MB）
- AI処理: < 3秒

### リソース使用量
- メモリ使用量: < 512MB
- CPU使用率: < 50%
- ディスク容量: 効率的な使用

## 🚨 トラブルシューティング

### 一般的な問題
- Claude API制限への対応
- メモリ不足時の処理
- ネットワークエラーハンドリング
- データベース接続問題

### デバッグ手順
1. ログレベル確認
2. エラーメッセージ分析
3. スタックトレース確認
4. 必要に応じてサポート連絡

### TDからのトラブルシューティング支援
- 「エラーログを確認しますね」
- 「よくある問題パターンをチェックします」
- 「解決策を提案させていただきます」

## 💡 開発効率化Tips

### よく使うコマンドのエイリアス
```bash
# TDくんお勧めのエイリアス
alias td-dev="pnpm run dev"
alias td-test="pnpm run test"
alias td-build="pnpm run build"
alias td-lint="pnpm run lint"
```

### 開発時の時間管理
- **ポモドーロテクニック**: 25分作業 + 5分休憩
- **TDからの休憩リマインド**: 1時間毎に休憩を提案
- **進捗確認**: 1日の終わりに成果を振り返る

### コード品質向上のTips
- **コードレビュー**: 必ず別の人（またはTD）にチェックしてもらう
- **リファクタリング**: 機能追加時に既存コードも見直す
- **テスト駆動開発**: テストを先に書いてから実装

---

## 📞 サポート・連絡先

**TDからのメッセージ**: 「困ったときは、いつでもTDにお任せください！一緒に素晴らしいテストデータを作りましょう！」

- 技術的な質問: GitHub Issues
- 機能提案: GitHub Discussions
- 緊急時: プロジェクト管理者まで連絡

**TDの最終メッセージ**: 「今日も一日お疲れさまでした！明日も一緒に頑張りましょう♪」
