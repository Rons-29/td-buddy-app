---
description: 
globs: 
alwaysApply: true
---
# 📝 ドキュメント作成・管理ルール
# TestData Buddy (TD) プロジェクトの文書化ガイドライン

## 🎯 ドキュメント戦略の基本原則

### セキュリティファースト原則
- **デフォルト非公開**: すべてのドキュメントは原則非公開
- **最小限公開**: 必要最低限の情報のみ公開
- **機密情報ゼロ**: 公開ドキュメントに機密情報は含めない
- **定期的レビュー**: 公開情報の定期的な見直し

**TDからのメッセージ**: 「安全第一でドキュメントを管理しましょう！機密情報は絶対に漏らしません🛡️」

## 🗂️ ドキュメント分類体系

### 📤 公開可能ドキュメント（GitHub公開OK）
```yaml
✅ 公開対象（限定的）:
  - README.md (プロジェクト概要のみ)
  - CONTRIBUTING.md (貢献ガイドライン)  
  - CHANGELOG.md (リリース履歴)
  - LICENSE (オープンソースライセンス)

⚠️ 公開時の注意:
  - 具体的な技術詳細は含めない
  - ビジネス戦略情報は除外
  - インフラ構成は記載しない
  - APIエンドポイント詳細は避ける
```

### 🔒 非公開ドキュメント（すべて秘匿）
```yaml
❌ 絶対非公開:
  📁 docs/ (フォルダ全体)
  📁 internal/ (内部情報)
  📁 business/ (ビジネス戦略)
  📁 technical/ (技術仕様書)
  📁 security/ (セキュリティ情報)
  📁 deployment/ (デプロイ情報)
  📁 costs/ (コスト分析)
  📁 competitors/ (競合分析)
  📁 planning/ (計画・ロードマップ)

🔐 機密レベル別管理:
  - レベル1: 一般開発情報
  - レベル2: 技術仕様・アーキテクチャ
  - レベル3: ビジネス戦略・財務情報
  - レベル4: セキュリティ・認証情報
```

## 📋 ドキュメント作成ルール

### 1. ファイル命名規則
```bash
# ✅ 推奨命名パターン
technical-architecture-2024.md
api-specification-v2.md
security-guidelines-internal.md
deployment-procedures-production.md
cost-analysis-2024-q4.md

# ❌ 避けるべき命名
doc1.md
temp.md
メモ.md
architecture.md（バージョン不明）
```

### 2. ドキュメント構造テンプレート
```markdown
# [ドキュメントタイトル]

## 📊 ドキュメント情報
- **作成日**: YYYY-MM-DD
- **最終更新**: YYYY-MM-DD
- **作成者**: [名前]
- **機密レベル**: [1-4]
- **対象読者**: [開発者/PM/経営陣]
- **関連プロジェクト**: TD-XXX

## 🎯 目的・概要
[なぜこのドキュメントが必要か]

## 📝 内容
[実際の内容]

## 📋 参考資料
[関連ドキュメント・外部リンク]

## ⚠️ 注意事項
[セキュリティ上の注意点等]

---
**TDからのメッセージ**: [関連するTDコメント]
```

### 3. マークダウン記法統一
```markdown
# レベル1見出し（ドキュメントタイトルのみ）
## レベル2見出し（セクション）
### レベル3見出し（サブセクション）

**太字** - 重要なキーワード
*斜体* - 補足情報
`コード` - コマンド・ファイル名
```Code Block``` - ソースコード

📋 チェックリスト:
- [ ] 完了項目
- [x] 未完了項目

⚠️ 警告表記: 重要な注意事項
✅ 成功表記: 推奨事項  
❌ 禁止表記: 避けるべき事項
🔒 機密表記: 機密情報含有

**TDからのメッセージ**: TDキャラクターコメント
```

## 🛡️ セキュリティチェックリスト

### ドキュメント作成時の必須確認
```yaml
📝 作成前チェック:
- [ ] 機密情報は含まれていないか
- [ ] APIキー・パスワード等は記載していないか
- [ ] 内部IPアドレス・サーバー情報はないか
- [ ] ビジネス戦略・売上情報はないか
- [ ] 競合他社への有益情報はないか
- [ ] 顧客情報・個人情報はないか

🔐 保存前チェック:
- [ ] 適切なフォルダに保存しているか
- [ ] ファイル名に機密情報は含まれていないか
- [ ] .gitignoreで保護されているか
- [ ] バックアップが設定されているか

📤 共有前チェック（内部共有時も）:
- [ ] 対象読者は適切か
- [ ] 必要最小限の情報のみか
- [ ] 期限付きアクセスが設定されているか
- [ ] アクセスログが記録されているか
```

## 📁 ディレクトリ構造（推奨）

### ローカル開発環境での構成
```
td-buddy-app/
├── docs/                          # 非公開ドキュメント（.gitignoreで除外）
│   ├── technical/                 # 技術文書
│   │   ├── architecture/          # アーキテクチャ設計
│   │   ├── api-specs/            # API仕様書
│   │   └── deployment/           # デプロイ手順
│   ├── business/                  # ビジネス文書
│   │   ├── strategy/             # 戦略・計画
│   │   ├── analysis/             # 市場・競合分析
│   │   └── costs/                # コスト分析
│   ├── security/                  # セキュリティ文書
│   │   ├── guidelines/           # ガイドライン
│   │   ├── incidents/            # インシデント記録
│   │   └── audits/               # 監査結果
│   ├── internal/                  # 内部情報
│   │   ├── meetings/             # 会議録
│   │   ├── decisions/            # 意思決定記録
│   │   └── todos/                # タスク・TODO
│   └── templates/                 # ドキュメントテンプレート
├── README.md                      # 公開可能（基本情報のみ）
├── CONTRIBUTING.md                # 公開可能（将来的に）
└── CHANGELOG.md                   # 公開可能（将来的に）
```

## 🔄 ドキュメントライフサイクル

### 1. 作成フェーズ
```bash
# ステップ1: テンプレートからコピー
cp docs/templates/technical-template.md docs/technical/new-feature-spec.md

# ステップ2: 内容作成
# エディタで編集

# ステップ3: セキュリティチェック
# チェックリストに従って確認

# ステップ4: 保存・バックアップ
# 適切なディレクトリに保存
```

### 2. 更新フェーズ
```yaml
📝 更新時ルール:
- 更新日時を必ず記録
- 変更理由・変更者を明記
- 過去バージョンの保管（重要文書）
- 影響範囲の確認・通知

🔄 定期見直し:
- 技術文書: 3ヶ月毎
- ビジネス文書: 6ヶ月毎
- セキュリティ文書: 1ヶ月毎
- 内部文書: 1年毎
```

### 3. 廃棄フェーズ
```yaml
🗑️ 廃棄条件:
- 情報が古く、誤解を招く可能性
- プロジェクト終了・機能廃止
- セキュリティ上の理由

📋 廃棄手順:
- 廃棄理由の記録
- 関係者への通知
- アーカイブ化（必要に応じて）
- 完全削除（機密情報の場合）
```

## 🚀 効率化ツール・テンプレート

### ドキュメント自動生成スクリプト
```bash
#!/bin/bash
# scripts/create-doc.sh
# TDドキュメント作成支援スクリプト

doc_type=$1
doc_name=$2

if [ -z "$doc_type" ] || [ -z "$doc_name" ]; then
    echo "🤖 TDの使用方法: ./create-doc.sh [type] [name]"
    echo "📋 利用可能タイプ: technical, business, security, internal"
    exit 1
fi

template_file="docs/templates/${doc_type}-template.md"
output_dir="docs/${doc_type}"
output_file="${output_dir}/${doc_name}.md"

if [ ! -f "$template_file" ]; then
    echo "❌ テンプレートファイルが見つかりません: $template_file"
    exit 1
fi

mkdir -p "$output_dir"
cp "$template_file" "$output_file"

# 日付等の自動置換
sed -i '' "s/\[作成日\]/$(date +%Y-%m-%d)/g" "$output_file"
sed -i '' "s/\[ドキュメント名\]/$doc_name/g" "$output_file"

echo "✅ TDがドキュメントを作成しました: $output_file"
echo "🤖 TDからのメッセージ: セキュリティチェックをお忘れなく！"
```

### VS Code スニペット
```json
// .vscode/snippets.json
{
  "TD Document Header": {
    "prefix": "td-doc",
    "body": [
      "# $1",
      "",
      "## 📊 ドキュメント情報",
      "- **作成日**: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}",
      "- **最終更新**: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}",
      "- **作成者**: $2",
      "- **機密レベル**: $3",
      "- **対象読者**: $4",
      "",
      "## 🎯 目的・概要",
      "$5",
      "",
      "## 📝 内容",
      "$0",
      "",
      "---",
      "**TDからのメッセージ**: $6"
    ],
    "description": "TDドキュメントテンプレート"
  }
}
```

## 📊 品質管理・KPI

### ドキュメント品質指標
```yaml
📈 品質KPI:
- 完全性: 必要情報が網羅されているか（95%以上）
- 正確性: 情報が正確で最新か（98%以上）  
- 明確性: 読みやすく理解しやすいか（90%以上）
- セキュリティ: 機密情報が適切に保護されているか（100%）

🔍 定期監査項目:
- 未更新ドキュメントの特定
- 機密情報漏洩の有無確認
- アクセス権限の適切性確認
- ドキュメント利用状況の分析
```

### レビュープロセス
```yaml
📝 レビュー必須ドキュメント:
- 技術仕様書（アーキテクト必須）
- セキュリティ関連（セキュリティ担当必須）
- ビジネス戦略（PM/経営陣必須）

🔄 レビュー手順:
1. 作成者が初稿作成
2. セキュリティチェック実施  
3. 関係者レビュー
4. 承認・公開/保存
5. 定期見直しスケジュール設定
```

## 🚨 緊急時対応

### 機密情報漏洩時の対応
```yaml
🚨 即座の対応:
1. 該当ドキュメントの特定・隔離
2. アクセスログの確認
3. 影響範囲の評価
4. 関係者への緊急通知

🔧 復旧手順:
1. 漏洩情報の回収・削除要請
2. アクセス権限の見直し
3. セキュリティ対策の強化
4. 再発防止策の実装

📋 事後対応:
1. インシデント報告書作成
2. 対応手順の見直し
3. 教育・研修の実施
4. 監査体制の強化
```

## 💡 TDからの効率化Tips

### 日常的なドキュメント作業
```bash
# TDお勧めエイリアス
alias td-doc-new="./scripts/create-doc.sh"
alias td-doc-check="./scripts/security-check.sh"
alias td-doc-backup="./scripts/backup-docs.sh"

# 定期実行タスク
# 毎週金曜日にドキュメント整理
0 17 * * 5 /path/to/td-doc-cleanup.sh

# 毎月1日にセキュリティチェック
0 9 1 * * /path/to/td-security-audit.sh
```

### 作業効率向上
```yaml
⚡ 効率化ポイント:
- テンプレートの積極活用
- スニペット・ショートカットの利用
- 自動化スクリプトの作成
- 定期的な整理・アーカイブ
- チーム内でのナレッジ共有

🤖 TDサポート機能:
- ドキュメント作成支援
- セキュリティチェック自動化
- 品質評価・改善提案
- バックアップ・復旧支援
```

---

## 🎯 まとめ

**TDの最終メッセージ**: 
```
「ドキュメントは、チームの知識を蓄積し、
 プロジェクトを成功に導く重要な資産です。

✅ 重要なポイント:
📋 セキュリティを最優先に考慮
📋 必要最小限の情報のみ公開
📋 継続的な品質管理・更新
📋 効率的な作成・管理体制

TDと一緒に、安全で価値のあるドキュメントを
作り上げていきましょう！

困ったときは、いつでもTDにご相談ください♪📚✨」
