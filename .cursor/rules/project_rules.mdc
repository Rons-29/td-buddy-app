---
description: 
globs: 
alwaysApply: true
---
# TestData Buddy (TD) Project Rules
# QAエンジニア向けAI連携型テストデータ生成ツールの開発ルール

## 🎯 プロジェクト概要
- プロジェクト名: TestData Buddy（愛称：TD）
- 目的: QAエンジニアのためのAI連携型テストデータ生成ツール
- 主要技術: NestJS (Backend) + Remix (Frontend) + TypeScript + Claude AI

## 📋 開発原則

### コーディング規約
- **言語**: TypeScript必須、JavaScriptは使用禁止
- **型安全性**: strictモードで開発、anyは原則禁止
- **関数**: async/awaitを推奨、Promiseチェーンは避ける
- **エラーハンドリング**: 必ずtry-catchまたはResult型を使用
- **ネーミング**: 
  - 変数・関数: camelCase
  - クラス・インターフェース: PascalCase
  - 定数: UPPER_SNAKE_CASE
  - ファイル: kebab-case

### アーキテクチャ設計
- **Backend**: NestJS + TypeScript + SQLite
- **Frontend**: Remix + TypeScript + TailwindCSS
- **AI連携**: Claude API (Anthropic)
- **データベース**: SQLite（開発）、Production対応可能な設計
- **API設計**: RESTful API + MCP Protocol対応

## 🏗️ プロジェクト構成

### ディレクトリ構造
```
td-buddy-app/
├── packages/
│   ├── api-server/          # NestJSバックエンド
│   ├── web-ui/              # Remixフロントエンド
│   └── shared/              # 共通型定義・ユーティリティ
├── docs/                    # ドキュメント
├── data/                    # 生成データ・データベース
└── scripts/                 # 便利スクリプト
```

## 🔧 開発ガイドライン

### ファイル作成・編集時のルール
1. **新機能開発**: 
   - まずtypeを定義（shared/types/）
   - APIエンドポイント実装（api-server/）
   - フロントエンド実装（web-ui/）
   - テスト追加

2. **コンポーネント設計**:
   - 単一責任の原則を守る
   - PropsとStateの型を明確に定義
   - 再利用可能な設計を心がける

3. **API設計**:
   - RESTful原則に従う
   - レスポンス形式を統一（success/error構造）
   - バリデーションは必須
   - レート制限を考慮

### コード品質基準
- **ESLint**: エラー0を維持
- **Prettier**: 自動フォーマット適用
- **Tests**: 新機能には必ずテスト追加
- **Type Coverage**: 95%以上を維持
- **Performance**: API応答時間 < 3秒

## 🤖 TDキャラクター設定

### TDの性格・特徴
- **忠実**: QAエンジニアの最高の相棒
- **頼りになる**: どんなテストデータでも生成可能
- **少しお茶目**: 時々ユニークなデータを提案
- **安全第一**: セキュリティを最優先

### UI/UX設計原則
- **直感的操作**: 専門知識不要で使える
- **高速レスポンス**: 待機時間を最小化
- **エラー対応**: 分かりやすいエラーメッセージ
- **アクセシビリティ**: 全ユーザーが使いやすい設計

## 📊 データ生成機能

### 対応データ種別
- **パスワード**: 強度別、文字種別設定可能
- **個人情報**: 日本語対応、GDPR準拠の仮データ
- **ファイル**: CSV, JSON, XML, SQL等
- **テキスト**: 多言語・文字種対応
- **数値**: 統計的分布を考慮

### セキュリティ要件
- 生成データの24時間自動削除
- APIキーの暗号化保存
- 入力値の厳格なバリデーション
- レート制限によるDDoS対策

## 🔄 CI/CD・開発フロー

### 開発フロー
1. Issue作成 → ブランチ作成
2. 機能実装 → テスト追加
3. コードレビュー → マージ
4. 自動デプロイ → 品質チェック

### コマンド規約
- `pnpm run dev`: 開発サーバー起動
- `pnpm run build`: プロダクションビルド
- `pnpm run test`: 全テスト実行
- `pnpm run lint`: コード品質チェック
- `pnpm run db:migrate`: データベース初期化

## 🌐 AI連携・MCP対応

### Claude AI連携
- 自然言語でのデータ生成指示対応
- コンテキスト理解による適切なデータ生成
- セキュリティを考慮したプロンプト設計

### MCP Protocol
- Cursor IDE統合
- リアルタイム通信
- プロトコル仕様準拠

## 📚 ドキュメント管理

### 必須ドキュメント
- README.md: プロジェクト概要
- API仕様書: エンドポイント詳細
- セキュリティガイドライン
- トラブルシューティング

### コメント規約
- 関数・クラスにはJSDoc形式
- 複雑なロジックには日本語コメント
- TODOには期限・担当者を記載

## ⚡ パフォーマンス目標

### レスポンス時間
- パスワード生成: < 100ms
- 個人情報生成: < 2秒（1,000件）
- ファイル生成: < 30秒（100MB）
- AI処理: < 3秒

### リソース使用量
- メモリ使用量: < 512MB
- CPU使用率: < 50%
- ディスク容量: 効率的な使用

## 🚨 トラブルシューティング

### 一般的な問題
- Claude API制限への対応
- メモリ不足時の処理
- ネットワークエラーハンドリング
- データベース接続問題

### デバッグ手順
1. ログレベル確認
2. エラーメッセージ分析
3. スタックトレース確認
4. 必要に応じてサポート連絡

---

## 📞 サポート・連絡先

**TDからのメッセージ**: 「困ったときは、いつでもTDにお任せください！一緒に素晴らしいテストデータを作りましょう！」

- 技術的な質問: GitHub Issues
- 機能提案: GitHub Discussions
- 緊急時: プロジェクト管理者まで連絡 