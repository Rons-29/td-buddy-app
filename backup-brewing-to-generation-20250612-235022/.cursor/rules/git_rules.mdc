---
description: 
globs: 
alwaysApply: true
---
# 🌿 Git操作ルール
# TestData Buddy (TD) プロジェクトのGit運用ガイドライン

## 🌱 ブランチ戦略

### ブランチ構成
- **main**: 本番用ブランチ（直接pushは禁止）
- **develop**: 開発用ブランチ
- **feature/**: 新機能開発用
- **hotfix/**: 緊急修正用
- **release/**: リリース準備用

### ブランチ命名規則
```bash
# 機能開発
feature/TD-123-password-generation
feature/TD-124-csv-export
feature/TD-125-ai-integration

# バグ修正・ホットフィックス
hotfix/TD-456-security-fix
hotfix/TD-457-memory-leak

# リリース準備
release/v1.2.0
release/v1.3.0-beta
```

## 📝 コミットメッセージ規約

### 基本フォーマット
```
<type>: <subject>

<body>

<footer>
```

### タイプ一覧
- **feat**: 新機能追加
- **fix**: バグ修正
- **docs**: ドキュメント更新
- **style**: コードフォーマット修正
- **refactor**: リファクタリング
- **test**: テスト追加・修正
- **chore**: ビルド処理・補助ツール修正

### コミットメッセージ例
```bash
feat: パスワード生成APIを追加

- 英数字・記号の組み合わせパスワード生成機能
- 長さ・文字種の詳細設定対応
- レート制限機能を実装

Closes TD-123

fix: セキュリティ脆弱性を修正

- XSS攻撃の可能性があった入力値検証を強化
- CSRFトークンの検証ロジックを追加

Security: CVE-2024-XXXX

docs: READMEのセットアップ手順を更新

- Node.js最小バージョンを18.0.0に変更
- 環境変数設定例を追加
- TDくんのアスキーアートを更新

test: パスワード生成機能のテストを追加

- 各文字種での生成テスト
- 境界値テスト（最小・最大長）
- エラーハンドリングテスト

refactor: データ生成ロジックをリファクタ

- 共通処理をutil関数に抽出
- 型安全性を向上
- パフォーマンスを15%改善

style: ESLintルール適用によるフォーマット修正

chore: pnpmバージョンを8.10.0に更新
```

## ✅ Git操作前の確認事項

### 1. コミット前チェックリスト
```bash
# 1. コード品質確認
pnpm run lint

# 2. テスト実行
pnpm run test

# 3. 型チェック
pnpm run type-check

# 4. 機密情報チェック
git diff --cached | grep -E "(password|secret|key|token)" && echo "⚠️  機密情報が含まれている可能性があります"
```

**TDからのメッセージ**: 「コミット前のチェック、完了しました！安全確認もOKです♪」

### 2. プッシュ前チェックリスト
- [ ] コミットメッセージが規約に従っている
- [ ] 意図しないファイルが含まれていない
- [ ] 大きなファイル（>100MB）が含まれていない
- [ ] 機密情報（APIキー等）が含まれていない

**TDからのメッセージ**: 「安全確認完了！プッシュしても大丈夫です🚀」

### 3. マージ前チェックリスト
- [ ] CI/CDパイプラインが成功している
- [ ] コードレビューが完了している
- [ ] 競合が解決されている
- [ ] テストカバレッジが低下していない

**TDからのメッセージ**: 「品質チェック完了！マージの準備ができました✨」

## ⚠️ 危険な操作の防止

### 禁止・制限事項
```bash
# ❌ 絶対禁止
git push --force origin main          # mainブランチへのforce push
git reset --hard HEAD~5               # バックアップなしでのhard reset

# ⚠️ 注意が必要
git push --force origin feature/xxx   # 代わりに --force-with-lease を使用
git rebase -i HEAD~10                 # 共有ブランチでは避ける
git commit --amend                     # 既にpushしたコミットは避ける
```

### 安全な代替操作
```bash
# ✅ 安全な方法
git push --force-with-lease origin feature/xxx
git revert <commit-hash>               # コミットを安全に取り消し
git commit --fixup <commit-hash>       # 修正コミットを作成
```

## 🔄 Git ワークフロー

### 1. 新機能開発フロー
```bash
# 1. 最新のdevelopブランチを取得
git checkout develop
git pull origin develop

# 2. 機能ブランチを作成
git checkout -b feature/TD-123-password-generation

# 3. 開発・コミット
git add .
git commit -m "feat: パスワード生成機能の基本実装"

# 4. 定期的にdevelopと同期
git fetch origin develop
git rebase origin/develop

# 5. プッシュ
git push origin feature/TD-123-password-generation

# 6. プルリクエスト作成
# GitHub/GitLabでPR作成

# 7. レビュー後マージ
# Squash and mergeを推奨
```

### 2. ホットフィックスフロー
```bash
# 1. mainブランチから緊急修正ブランチ作成
git checkout main
git pull origin main
git checkout -b hotfix/TD-456-security-fix

# 2. 修正・テスト
git add .
git commit -m "fix: 緊急セキュリティ修正"

# 3. mainとdevelopの両方にマージ
# PR作成 → main
# PR作成 → develop
```

## 🏷️ タグ管理

### リリースタグ
```bash
# セマンティックバージョニング
git tag -a v1.2.0 -m "Release v1.2.0: パスワード生成機能追加"
git push origin v1.2.0

# プレリリース
git tag -a v1.3.0-beta.1 -m "Beta release v1.3.0-beta.1"
git push origin v1.3.0-beta.1
```

### タグ命名規則
- **安定版**: `v1.2.0`, `v2.0.0`
- **ベータ版**: `v1.3.0-beta.1`, `v1.3.0-beta.2`
- **リリース候補**: `v1.3.0-rc.1`, `v1.3.0-rc.2`

## 🛠️ 便利なGitエイリアス

### .gitconfig設定例
```bash
[alias]
    # 基本操作
    co = checkout
    br = branch
    ci = commit
    st = status
    
    # TD専用エイリアス
    td-new = !git checkout develop && git pull origin develop && git checkout -b
    td-sync = !git fetch origin develop && git rebase origin/develop
    td-clean = !git branch --merged | grep -v "\\*\\|main\\|develop" | xargs -n 1 git branch -d
    
    # ログ表示
    lg = log --oneline --graph --decorate --all
    td-log = log --oneline --graph --decorate --color --format='%C(yellow)%h%C(reset) %C(blue)%an%C(reset) %C(green)%cr%C(reset) %s'
    
    # 状態確認
    td-status = !echo "🤖 TDくんの状態確認です！" && git status --short
    td-diff = diff --color-words
```

## 🚨 トラブルシューティング

### よくある問題と解決方法

#### 1. コンフリクト解決
```bash
# コンフリクト発生時
git status                    # コンフリクトファイルを確認
# ファイルを手動編集
git add <resolved-files>
git commit -m "fix: コンフリクト解決"
```

**TDからのメッセージ**: 「コンフリクト解決、お疲れさまでした！丁寧に確認していただき、ありがとうございます♪」

#### 2. 間違ったコミット
```bash
# 直前のコミットを修正
git commit --amend -m "正しいコミットメッセージ"

# コミットを取り消し（ファイルは残す）
git reset --soft HEAD~1

# コミットを完全に取り消し
git reset --hard HEAD~1  # ⚠️ 注意！変更が失われます
```

#### 3. 間違ったブランチでの作業
```bash
# 作業内容を保存
git stash

# 正しいブランチに移動
git checkout correct-branch

# 作業内容を復元
git stash pop
```

**TDからのメッセージ**: 「間違いは誰にでもあります！TDが一緒に解決しましょう😊」

---

**TDからの応援メッセージ**: 「Gitの操作も慣れれば大丈夫！困ったときはTDがサポートします。安全第一で、一緒に素晴らしいコードを管理しましょう🌿」
