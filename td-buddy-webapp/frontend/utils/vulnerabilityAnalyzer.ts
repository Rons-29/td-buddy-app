import {
  EducationalContent,
  VulnerabilityAnalysis,
  VulnerabilityIssue,
} from '../types/password';

// 一般的な脆弱なパスワードパターン
const COMMON_PASSWORDS = [
  'password',
  '123456',
  '123456789',
  'qwerty',
  'abc123',
  'password123',
  'admin',
  'letmein',
  'welcome',
  'monkey',
  '1234567890',
  'iloveyou',
];

const KEYBOARD_PATTERNS = [
  'qwerty',
  'asdf',
  'zxcv',
  '1234',
  'qwertyuiop',
  'asdfghjkl',
  'zxcvbnm',
];

const SEQUENTIAL_PATTERNS = [
  '123',
  '234',
  '345',
  '456',
  '567',
  '678',
  '789',
  '890',
  'abc',
  'bcd',
  'cde',
  'def',
  'efg',
  'fgh',
  'ghi',
];

// 脆弱性分析のメイン関数
export function analyzePasswordVulnerability(
  password: string,
  vulnerabilityType?: string
): VulnerabilityAnalysis {
  const vulnerabilities: VulnerabilityIssue[] = [];
  let vulnerabilityScore = 0;

  // 長さの分析
  if (password.length < 8) {
    vulnerabilities.push({
      type: 'length',
      severity: 'critical',
      description: `パスワードが短すぎます（${password.length}文字）`,
      impact: 'ブルートフォース攻撃で数秒〜数分で破られる可能性があります',
      examples: ['123456', 'abc123'],
    });
    vulnerabilityScore += 30;
  } else if (password.length < 12) {
    vulnerabilities.push({
      type: 'length',
      severity: 'medium',
      description: `パスワードの長さが推奨値以下です（${password.length}文字）`,
      impact: '十分な時間があれば破られる可能性があります',
    });
    vulnerabilityScore += 15;
  }

  // 一般的なパスワードの検査
  const lowerPassword = password.toLowerCase();
  if (COMMON_PASSWORDS.some(common => lowerPassword.includes(common))) {
    vulnerabilities.push({
      type: 'common',
      severity: 'critical',
      description: '一般的によく使われるパスワードパターンが含まれています',
      impact: '辞書攻撃で即座に破られます',
      examples: COMMON_PASSWORDS.slice(0, 5),
    });
    vulnerabilityScore += 40;
  }

  // キーボードパターンの検査
  if (KEYBOARD_PATTERNS.some(pattern => lowerPassword.includes(pattern))) {
    vulnerabilities.push({
      type: 'pattern',
      severity: 'high',
      description: 'キーボード配列のパターンが検出されました',
      impact: 'パターン攻撃で短時間で破られる可能性があります',
      examples: ['qwerty123', 'asdf1234'],
    });
    vulnerabilityScore += 25;
  }

  // 連続パターンの検査
  if (SEQUENTIAL_PATTERNS.some(pattern => lowerPassword.includes(pattern))) {
    vulnerabilities.push({
      type: 'pattern',
      severity: 'high',
      description: '連続する文字・数字のパターンが検出されました',
      impact: 'パターン攻撃で破られやすくなります',
      examples: ['123456', 'abcdef'],
    });
    vulnerabilityScore += 20;
  }

  // 文字種の多様性チェック
  const hasUpper = /[A-Z]/.test(password);
  const hasLower = /[a-z]/.test(password);
  const hasNumber = /[0-9]/.test(password);
  const hasSymbol = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password);

  const charTypeCount = [hasUpper, hasLower, hasNumber, hasSymbol].filter(
    Boolean
  ).length;

  if (charTypeCount < 2) {
    vulnerabilities.push({
      type: 'character-set',
      severity: 'high',
      description: '使用している文字種が少なすぎます',
      impact: '文字種が限定されているため、攻撃の対象範囲が狭くなります',
    });
    vulnerabilityScore += 20;
  } else if (charTypeCount < 3) {
    vulnerabilities.push({
      type: 'character-set',
      severity: 'medium',
      description: '文字種の多様性が不足しています',
      impact: 'より多くの文字種を使用することで安全性が向上します',
    });
    vulnerabilityScore += 10;
  }

  // 反復パターンの検査
  const repeatedChars = password.match(/(.)\1{2,}/g);
  if (repeatedChars) {
    vulnerabilities.push({
      type: 'pattern',
      severity: 'medium',
      description: '同じ文字の連続が検出されました',
      impact: 'パターンの予測可能性が高まります',
      examples: ['aaa', '111', '!!!'],
    });
    vulnerabilityScore += 15;
  }

  // 教育コンテンツの生成
  const educationalContent = generateEducationalContent(
    vulnerabilityType,
    vulnerabilities
  );

  // 推奨事項の生成
  const recommendations = generateRecommendations(vulnerabilities);

  // 比較例の生成
  const comparisonExample = generateComparisonExample(
    password,
    vulnerabilities
  );

  return {
    vulnerabilityScore: Math.min(vulnerabilityScore, 100),
    vulnerabilities,
    recommendations,
    educationalContent,
    comparisonExample,
  };
}

function generateEducationalContent(
  vulnerabilityType?: string,
  vulnerabilities?: VulnerabilityIssue[]
): EducationalContent {
  const baseContent = {
    common: {
      title: '一般的な脆弱パスワードについて',
      explanation:
        'よく使われるパスワードは攻撃者にとって最初の標的となります。',
      whyVulnerable: [
        '辞書攻撃で簡単に発見される',
        '多くの人が同じパスワードを使用している',
        'パスワードリストに含まれている可能性が高い',
      ],
      attackMethods: [
        {
          name: '辞書攻撃',
          description: '一般的なパスワードのリストを使用した攻撃',
          timeToBreak: '数秒〜数分',
          difficulty: 'trivial' as const,
        },
        {
          name: 'レインボーテーブル攻撃',
          description: '事前計算されたハッシュテーブルを使用',
          timeToBreak: '即座',
          difficulty: 'easy' as const,
        },
      ],
      realWorldExamples: [
        '2019年のCollection #1データ漏洩では、"123456"が最も多く使用されていた',
        'LinkedInの漏洩では、"password"が上位にランクイン',
        'Adobeの事件では、単純なパスワードが大量に発見された',
      ],
    },
    dictionary: {
      title: '辞書攻撃の脆弱性',
      explanation:
        '辞書に載っている単語や一般的な組み合わせは攻撃の標的になりやすいです。',
      whyVulnerable: [
        '辞書攻撃ツールで自動的に試行される',
        '単語の組み合わせパターンが予測可能',
        '言語的な意味を持つため記憶しやすく、多用される',
      ],
      attackMethods: [
        {
          name: '辞書攻撃',
          description: '単語辞書を使用した総当たり攻撃',
          timeToBreak: '数分〜数時間',
          difficulty: 'easy' as const,
        },
        {
          name: 'ハイブリッド攻撃',
          description: '辞書攻撃と文字変換の組み合わせ',
          timeToBreak: '数時間〜数日',
          difficulty: 'medium' as const,
        },
      ],
      realWorldExamples: [
        'John the Ripperなどのツールで簡単に破られる',
        '企業の情報漏洩事件で頻繁に発見される',
        'パスワード強度測定で「弱い」と判定される',
      ],
    },
    sequential: {
      title: '連続パターンの危険性',
      explanation:
        '連続する文字や数字は人間にとって覚えやすいですが、攻撃者にも予測しやすいパターンです。',
      whyVulnerable: [
        'パターンが非常に予測可能',
        '自動化された攻撃で簡単に発見される',
        'キーボード配列に基づく攻撃に脆弱',
      ],
      attackMethods: [
        {
          name: 'パターン攻撃',
          description: '連続パターンを狙った攻撃',
          timeToBreak: '数分',
          difficulty: 'trivial' as const,
        },
        {
          name: 'キーボードウォーク攻撃',
          description: 'キーボード配列に基づく攻撃',
          timeToBreak: '数分〜数時間',
          difficulty: 'easy' as const,
        },
      ],
      realWorldExamples: [
        '"123456"は世界で最も使用されるパスワード',
        '"qwerty"はキーボード配列攻撃の典型例',
        'ATMの暗証番号でも同様のパターンが問題となっている',
      ],
    },
  };

  const typeContent =
    baseContent[vulnerabilityType as keyof typeof baseContent];
  return typeContent || baseContent.common;
}

function generateRecommendations(
  vulnerabilities: VulnerabilityIssue[]
): string[] {
  const recommendations: string[] = [];

  if (vulnerabilities.some(v => v.type === 'length')) {
    recommendations.push('パスワードを12文字以上にする');
  }

  if (vulnerabilities.some(v => v.type === 'character-set')) {
    recommendations.push('大文字、小文字、数字、記号を組み合わせる');
  }

  if (vulnerabilities.some(v => v.type === 'common')) {
    recommendations.push('一般的な単語や組み合わせを避ける');
  }

  if (vulnerabilities.some(v => v.type === 'pattern')) {
    recommendations.push('連続する文字やキーボードパターンを避ける');
  }

  // 基本的な推奨事項を追加
  recommendations.push(
    'パスワードマネージャーを使用してランダムなパスワードを生成する',
    '定期的にパスワードを変更する',
    '二要素認証を有効にする'
  );

  return recommendations;
}

function generateComparisonExample(
  weakPassword: string,
  vulnerabilities: VulnerabilityIssue[]
): { weakPassword: string; strongPassword: string; explanation: string } {
  // 脆弱性に基づいて強いパスワードの例を生成
  let strongPassword = '';
  let explanation = '';

  if (vulnerabilities.some(v => v.type === 'length')) {
    strongPassword = 'MyStr0ng&SecureP@ssw0rd2024!';
    explanation =
      '長さを16文字以上にし、複数の文字種を組み合わせることで安全性が大幅に向上します。';
  } else if (vulnerabilities.some(v => v.type === 'common')) {
    strongPassword = 'Tr@il&Hiking#2024$Adventure';
    explanation =
      '一般的な単語を避け、個人的な意味を持つフレーズを記号と数字で強化しています。';
  } else if (vulnerabilities.some(v => v.type === 'pattern')) {
    strongPassword = 'R@nd0m&Secure#Ch@rs!Mix';
    explanation =
      '連続パターンを避け、ランダムな文字配置で予測困難にしています。';
  } else {
    strongPassword = 'Complex&Secure#P@ssw0rd!2024';
    explanation =
      '複数の文字種を組み合わせ、十分な長さを確保した安全なパスワードです。';
  }

  return {
    weakPassword,
    strongPassword,
    explanation,
  };
}

// 脆弱性スコアに基づく評価
export function getVulnerabilityLevel(score: number): {
  level: 'low' | 'medium' | 'high' | 'critical';
  label: string;
  color: string;
  icon: string;
} {
  if (score >= 80) {
    return { level: 'critical', label: '極めて危険', color: 'red', icon: '💀' };
  } else if (score >= 60) {
    return { level: 'high', label: '高リスク', color: 'red', icon: '🔴' };
  } else if (score >= 30) {
    return { level: 'medium', label: '中リスク', color: 'orange', icon: '🟠' };
  } else {
    return { level: 'low', label: '低リスク', color: 'yellow', icon: '🟡' };
  }
}
