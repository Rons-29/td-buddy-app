import { Request, Response, NextFunction } from 'express';
import { tdLog } from './requestLogger';

export interface ErrorWithStatus extends Error {
  status?: number;
  code?: string;
  details?: any;
}

export interface ApiError {
  success: false;
  error: {
    code: string;
    message: string;
    details?: any;
    timestamp: string;
    requestId?: string;
  };
}

// „Ç®„É©„ÉºÁ®ÆÂà•„ÅÆÂÆöÁæ©
export enum ErrorCodes {
  // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº
  VALIDATION_ERROR = 'VALIDATION_ERROR',
  INVALID_REQUEST = 'INVALID_REQUEST',
  MISSING_REQUIRED_FIELD = 'MISSING_REQUIRED_FIELD',
  
  // Ë™çË®º„ÉªË™çÂèØ„Ç®„É©„Éº
  UNAUTHORIZED = 'UNAUTHORIZED',
  FORBIDDEN = 'FORBIDDEN',
  INVALID_TOKEN = 'INVALID_TOKEN',
  
  // „É™„ÇΩ„Éº„Çπ„Ç®„É©„Éº
  NOT_FOUND = 'NOT_FOUND',
  RESOURCE_CONFLICT = 'RESOURCE_CONFLICT',
  
  // „É¨„Éº„ÉàÂà∂Èôê„Ç®„É©„Éº
  RATE_LIMIT_EXCEEDED = 'RATE_LIMIT_EXCEEDED',
  TOO_MANY_REQUESTS = 'TOO_MANY_REQUESTS',
  
  // „Çµ„Éº„Éê„Éº„Ç®„É©„Éº
  INTERNAL_SERVER_ERROR = 'INTERNAL_SERVER_ERROR',
  DATABASE_ERROR = 'DATABASE_ERROR',
  EXTERNAL_SERVICE_ERROR = 'EXTERNAL_SERVICE_ERROR',
  
  // „Éë„Çπ„ÉØ„Éº„ÉâÁîüÊàêÂõ∫Êúâ„ÅÆ„Ç®„É©„Éº
  PASSWORD_GENERATION_FAILED = 'PASSWORD_GENERATION_FAILED',
  INVALID_PASSWORD_CRITERIA = 'INVALID_PASSWORD_CRITERIA',
  CHARACTER_SET_EMPTY = 'CHARACTER_SET_EMPTY',
  PASSWORD_TOO_WEAK = 'PASSWORD_TOO_WEAK',
  
  // AIÈÄ£Êê∫„Ç®„É©„Éº
  AI_SERVICE_UNAVAILABLE = 'AI_SERVICE_UNAVAILABLE',
  AI_QUOTA_EXCEEDED = 'AI_QUOTA_EXCEEDED',
  AI_RESPONSE_INVALID = 'AI_RESPONSE_INVALID'
}

// „Ç´„Çπ„Çø„É†„Ç®„É©„Éº„ÇØ„É©„Çπ
export class TDError extends Error {
  public readonly status: number;
  public readonly code: string;
  public readonly details?: any;
  public readonly timestamp: string;

  constructor(
    message: string,
    status: number = 500,
    code: string = ErrorCodes.INTERNAL_SERVER_ERROR,
    details?: any
  ) {
    super(message);
    this.name = 'TDError';
    this.status = status;
    this.code = code;
    this.details = details;
    this.timestamp = new Date().toISOString();
  }
}

// ÂÖ∑‰ΩìÁöÑ„Å™„Ç®„É©„Éº„ÇØ„É©„ÇπÁæ§
export class ValidationError extends TDError {
  constructor(message: string, details?: any) {
    super(message, 400, ErrorCodes.VALIDATION_ERROR, details);
    this.name = 'ValidationError';
  }
}

export class NotFoundError extends TDError {
  constructor(resource: string, id?: string) {
    const message = id ? `${resource} with ID '${id}' not found` : `${resource} not found`;
    super(message, 404, ErrorCodes.NOT_FOUND);
    this.name = 'NotFoundError';
  }
}

export class RateLimitError extends TDError {
  constructor(limit: number, window: string) {
    super(
      `Rate limit exceeded: ${limit} requests per ${window}`,
      429,
      ErrorCodes.RATE_LIMIT_EXCEEDED,
      { limit, window }
    );
    this.name = 'RateLimitError';
  }
}

export class PasswordGenerationError extends TDError {
  constructor(message: string, details?: any) {
    super(message, 400, ErrorCodes.PASSWORD_GENERATION_FAILED, details);
    this.name = 'PasswordGenerationError';
  }
}

export class AIServiceError extends TDError {
  constructor(message: string, details?: any) {
    super(message, 503, ErrorCodes.AI_SERVICE_UNAVAILABLE, details);
    this.name = 'AIServiceError';
  }
}

// „Ç®„É©„Éº„É¨„Çπ„Éù„É≥„Çπ‰ΩúÊàê
export function createErrorResponse(
  error: Error | TDError,
  requestId?: string
): ApiError {
  const isKnownError = error instanceof TDError;
  
  const errorObj: ApiError['error'] = {
    code: isKnownError ? error.code : ErrorCodes.INTERNAL_SERVER_ERROR,
    message: isKnownError ? error.message : 'Internal server error',
    details: isKnownError ? error.details : undefined,
    timestamp: isKnownError ? error.timestamp : new Date().toISOString()
  };

  if (requestId) {
    errorObj.requestId = requestId;
  }

  return {
    success: false,
    error: errorObj
  };
}

// „É°„Ç§„É≥„Ç®„É©„Éº„Éè„É≥„Éâ„É©„Éº„Éü„Éâ„É´„Ç¶„Çß„Ç¢
export function errorHandler(
  err: Error | TDError,
  req: Request,
  res: Response,
  next: NextFunction
): void {
  const requestId = (req.headers['x-request-id'] as string) || 
                  (req.headers['x-correlation-id'] as string) ||
                  Math.random().toString(36).substring(7);

  // „É≠„Ç∞Âá∫Âäõ
  logError(err, requestId, req);

  // „É¨„Çπ„Éù„É≥„Çπ‰ΩúÊàê
  const errorResponse = createErrorResponse(err, requestId);
  const statusCode = (err as any).status || 500;

  // „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Éò„ÉÉ„ÉÄ„ÉºËøΩÂä†
  res.set({
    'X-Content-Type-Options': 'nosniff',
    'X-Frame-Options': 'DENY',
    'X-XSS-Protection': '1; mode=block'
  });

  res.status(statusCode).json(errorResponse);
}

// „Ç®„É©„Éº„É≠„Ç∞Âá∫Âäõ
function logError(err: Error | TDError, requestId: string, req: Request): void {
  const logData = {
    timestamp: new Date().toISOString(),
    requestId,
    method: req.method,
    url: req.url,
    userAgent: req.headers['user-agent'],
    ip: req.ip,
    error: {
      name: err.name,
      message: err.message,
      stack: err.stack,
      ...(err instanceof TDError && {
        code: err.code,
        status: err.status,
        details: err.details
      })
    }
  };

  // „Ç®„É©„Éº„É¨„Éô„É´„Å´Âøú„Åò„Åü„É≠„Ç∞Âá∫Âäõ
  if (err instanceof TDError && err.status < 500) {
    console.warn('üü° Client Error:', JSON.stringify(logData, null, 2));
  } else {
    console.error('üî¥ Server Error:', JSON.stringify(logData, null, 2));
  }

  // TD„Åã„Çâ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏
  if (err instanceof PasswordGenerationError) {
    console.log('ü§ñ TD: „Éë„Çπ„ÉØ„Éº„ÉâÁîüÊàê„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇË®≠ÂÆö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
  } else if (err instanceof AIServiceError) {
    console.log('ü§ñ TD: AIÈÄ£Êê∫„Çµ„Éº„Éì„Çπ„Å´ÂïèÈ°å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ„Åó„Å∞„Çâ„ÅèÂæÖ„Å£„Å¶„Åã„ÇâÂÜçË©¶Ë°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
  } else if (err instanceof RateLimitError) {
    console.log('ü§ñ TD: „É™„ÇØ„Ç®„Çπ„ÉàÂà∂Èôê„Å´ÈÅî„Åó„Åæ„Åó„Åü„ÄÇÂ∞ë„ÅóÈñìÈöî„ÇíÁ©∫„Åë„Å¶„Åã„Çâ„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ');
  }
}

// 404„Ç®„É©„Éº„Éè„É≥„Éâ„É©„Éº
export function notFoundHandler(
  req: Request,
  res: Response,
  next: NextFunction
): void {
  const error = new NotFoundError('Endpoint', req.originalUrl);
  next(error);
}

// ÈùûÂêåÊúü„Ç®„É©„Éº„Ç≠„É£„ÉÉ„ÉÅÁî®„É©„ÉÉ„Éë„Éº
export function asyncHandler<T>(
  fn: (req: Request, res: Response, next: NextFunction) => Promise<T>
) {
  return (req: Request, res: Response, next: NextFunction): void => {
    Promise.resolve(fn(req, res, next)).catch(next);
  };
}

// „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº„Éò„É´„Éë„Éº
export function validateRequest(validations: Array<() => boolean | string>): void {
  const errors: string[] = [];
  
  for (const validation of validations) {
    const result = validation();
    if (typeof result === 'string') {
      errors.push(result);
    } else if (result === false) {
      errors.push('Validation failed');
    }
  }
  
  if (errors.length > 0) {
    throw new ValidationError('Request validation failed', { errors });
  }
}

// ÁâπÂÆö„Ç®„É©„Éº„ÅÆ„Åü„ÇÅ„ÅÆ„Éò„É´„Éë„ÉºÈñ¢Êï∞
export function throwIfEmpty(value: any, fieldName: string): void {
  if (!value || (Array.isArray(value) && value.length === 0) || 
      (typeof value === 'string' && value.trim() === '')) {
    throw new ValidationError(`${fieldName} is required and cannot be empty`);
  }
}

export function throwIfInvalidRange(
  value: number,
  min: number,
  max: number,
  fieldName: string
): void {
  if (value < min || value > max) {
    throw new ValidationError(
      `${fieldName} must be between ${min} and ${max}`,
      { value, min, max }
    );
  }
}

export function throwIfNotPositive(value: number, fieldName: string): void {
  if (value <= 0) {
    throw new ValidationError(`${fieldName} must be a positive number`);
  }
}

// „Éó„É≠„Çª„ÇπÁµÇ‰∫ÜÊôÇ„ÅÆ„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
export function setupGlobalErrorHandlers(): void {
  // Êú™Âá¶ÁêÜ„ÅÆ Promise rejection „Çí„Ç≠„É£„ÉÉ„ÉÅ
  process.on('unhandledRejection', (reason: any, promise: Promise<any>) => {
    console.error('üö® Unhandled Promise Rejection at:', promise, 'reason:', reason);
    console.log('ü§ñ TD: ‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„Ç∑„Çπ„ÉÜ„É†„ÇíÂÆâÂÖ®„Å´„Ç∑„É£„ÉÉ„Éà„ÉÄ„Ç¶„É≥„Åó„Åæ„Åô„ÄÇ');
    
    // „É≠„Ç∞„Å´Ë®òÈå≤Âæå„ÄÅ„Éó„É≠„Çª„Çπ„ÇíÁµÇ‰∫Ü
    setTimeout(() => {
      process.exit(1);
    }, 5000);
  });

  // Êú™Âá¶ÁêÜ„ÅÆ‰æãÂ§ñ„Çí„Ç≠„É£„ÉÉ„ÉÅ
  process.on('uncaughtException', (error: Error) => {
    console.error('üö® Uncaught Exception:', error);
    console.log('ü§ñ TD: ÈáçÂ§ß„Å™„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇÂç≥Â∫ß„Å´„Ç∑„É£„ÉÉ„Éà„ÉÄ„Ç¶„É≥„Åó„Åæ„Åô„ÄÇ');
    
    // Âç≥Â∫ß„Å´„Éó„É≠„Çª„Çπ„ÇíÁµÇ‰∫Ü
    process.exit(1);
  });

  // SIGTERM „Ç∑„Ç∞„Éä„É´„ÅÆÂá¶ÁêÜ
  process.on('SIGTERM', () => {
    console.log('ü§ñ TD: SIGTERM„ÇíÂèó‰ø°„Åó„Åæ„Åó„Åü„ÄÇÂÆâÂÖ®„Å´„Ç∑„É£„ÉÉ„Éà„ÉÄ„Ç¶„É≥„Åó„Åæ„Åô...');
    process.exit(0);
  });

  // SIGINT „Ç∑„Ç∞„Éä„É´„ÅÆÂá¶ÁêÜ (Ctrl+C)
  process.on('SIGINT', () => {
    console.log('\nü§ñ TD: SIGINT„ÇíÂèó‰ø°„Åó„Åæ„Åó„Åü„ÄÇÂÆâÂÖ®„Å´„Ç∑„É£„ÉÉ„Éà„ÉÄ„Ç¶„É≥„Åó„Åæ„Åô...');
    process.exit(0);
  });
} 